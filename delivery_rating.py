# -*- coding: utf-8 -*-
"""Delivery - rating

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DdCuRlP7gXhzXYOxssJiXf3-Aiq9JsxK

##PROBLEM STATEMENT:
 To find the Delivery person's ratings, using the K-NN model

###GIVEN:
 We are having the dataset downloaded from kaggle, which has columns about each of the delivery.

###METHODOLOGY: 
At the beginning we have imported required packages.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn import linear_model

"""Loading the dataset"""

df = pd.read_csv("/content/train.csv")

"""Viewing the required information from the dataset"""

df.head(18)

"""Replacing the NaN values, so that it will be easy to eliminate those rows using dropna function"""

df.replace({"NaN": np.nan}, regex=True, inplace = True)

"""Dropping null valued row and reordering the dataframe."""

df.isna().sum()

df.dropna(inplace=True)
df.reset_index(drop=True, inplace=True) #reindexing

df["Delivery_person_Age"]=df["Delivery_person_Age"].astype(int)
df["Delivery_person_Ratings"]=df["Delivery_person_Ratings"].astype(float)
df.info()

"""Calculating the distance using delivery and restarurant's latitude and longitude"""

from math import sin, cos, sqrt, atan2, radians

# approximate radius of earth in km
R = 6373.0
def distance_calculator(lat1,lon1,lat2,lon2):

    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return(distance)

"""Calculating the distance and storing in the dist column"""

dist=[]
for i in range(len(df)):
    dist.append(distance_calculator(df["Restaurant_latitude"][i],df["Restaurant_longitude"][i],df["Delivery_location_latitude"][i],df["Delivery_location_longitude"][i]))

dist = pd.DataFrame(dist)
med = dist.median()
dist=np.array(dist)

"""According to our dataset, the delivery is done within the radius of 100 km. So replacing the larger distances by median of the distance."""

for i in range(len(dist)):
    if (dist[i]>100):
        dist[i]= med

"""Saving this distance in the dataframe as integer type"""

df["Distance"]=dist
df.info()

"""Since we have only numerical values. So changing them into required data type"""

for label,content in df.items():
    if not pd.api.types.is_numeric_dtype(content):
        df[label]=pd.Categorical(content).codes+1

df.info()

"""Setting target variable as time taken, and doing splitting inorder to train our model."""

x=df.drop("Time_taken(min)",axis=1)
y=df["Time_taken(min)"]

"""Here, practically speaking, the delivery ratings are influenced mostly by, Road_traffic_density, type of area delivered, time taken and distance. So, having them and droping the remaining column.*italicised text*"""

X = x.drop(['ID','Delivery_person_ID','Delivery_person_Age',	'Restaurant_latitude',	'Restaurant_longitude','Delivery_location_latitude',	'Delivery_person_Ratings','Delivery_location_longitude','Order_Date', 'Time_Orderd'	,'Time_Order_picked',	'Type_of_order'		,'multiple_deliveries'], axis = 1)

Y = df['Delivery_person_Ratings'].astype(int)
Y = pd.DataFrame(Y)

X.info()

"""Splitting the training and testing data"""

Y = np.ravel(Y)
x_train, x_valid, y_train, y_valid = train_test_split(X, Y, test_size=0.33, random_state=42)

"""Using KNN classifier for the rating preditions"""

from sklearn.neighbors import KNeighborsClassifier

# Create KNN classifier
knn = KNeighborsClassifier(n_neighbors=3)

# Fit the classifier to the data
knn.fit(x_train, y_train)

y_pred = knn.predict(x_valid)
accuracy = np.mean(y_pred == y_valid)
print("Accuracy:", accuracy)

"""Let's try K-fold, to find the best model fit"""

import numpy as np
from sklearn.model_selection import KFold, cross_val_score
from sklearn.neighbors import KNeighborsClassifier

# Define the cross-validation method
kfold = KFold(n_splits=5)

# Fit the KNN model and evaluate its performance using cross-validation
knn = KNeighborsClassifier()
scores = cross_val_score(knn, X, Y, cv=kfold)

# Print the average accuracy and the standard deviation of the scores
print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std() * 2))

"""The accuracy of k-fold KNN model fits with accuracy of 87%. Thus using this model, we can find the delivery person's ratings, for future uses."""